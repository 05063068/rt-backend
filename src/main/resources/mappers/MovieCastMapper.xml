<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
  Notes:
    Unconditionally returns all non-cast roles (directors, producers, screenwriters)
    Returns only the requested number of actor (ACT) items, if a limit is specified.
    
  TODO:  
 	How to handle public_ind?
 -->
<mapper namespace="com.rottentomatoes.movieapi.mappers.MovieCastMapper">
    <sql id="selectColumns">
        movie_cast.*,
        movie_person.name movie_person_name,
        movie_person.id movie_person_id,
        'tmp_person_vanity_string' AS movie_person_vanity,
        movie_character.name character_name,
        <include refid="com.rottentomatoes.movieapi.mappers.PersonMapper.moviePersonImageColumns"/>
    </sql>

    <select id="selectMovieCastById" resultMap="movieCastResultMap" parameterType="map">
        SELECT
        <include refid="selectColumns"/>
        FROM movie_cast
        LEFT JOIN movie_person ON movie_cast.person_id = movie_person.id
        LEFT JOIN movie_character ON movie_cast.id = movie_character.cast_id

        WHERE movie_cast.id = #{movieCastId}

        AND movie_cast.deleted_ind != 1
        AND movie_person.deleted_ind != 1
        AND (movie_character.deleted_ind IS NULL OR movie_character.deleted_ind != 1)
    </select>

    <select id="selectMovieCastForMovie" resultMap="movieCastResultMap" parameterType="map">
        SELECT
        <include refid="selectColumns"/>
        FROM (
        (SELECT id FROM movie_cast
        WHERE movie_id = #{movie_id}
        AND role = 'ACT'
        AND deleted_ind != 1)
        UNION
        (SELECT id FROM movie_cast
        WHERE movie_id = #{movie_id}
        AND role != 'ACT'
        AND deleted_ind != 1
        )) cast_ids
        LEFT JOIN movie_cast ON movie_cast.id = cast_ids.id
        LEFT JOIN movie_person ON movie_cast.person_id = movie_person.id
        LEFT JOIN movie_character ON movie_cast.id = movie_character.cast_id
        LEFT JOIN rtactor_img ON movie_person.main_rtactor_image_id = rtactor_img.id
        WHERE (movie_character.deleted_ind IS NULL OR movie_character.deleted_ind != 1)
        AND (movie_person.deleted_ind IS NULL OR movie_person.deleted_ind != 1)
        <if test="role">
            AND role = #{role}
        </if>
        ORDER BY movie_cast.role, movie_cast.sortkey

        <choose>
            <when test="limit != null and offset != null">
                LIMIT #{offset},#{limit}
            </when>
            <when test="limit != null">
                LIMIT #{limit}
            </when>
        </choose>
    </select>

    <resultMap id="movieCastResultMap" type="com.rottentomatoes.movieapi.domain.model.MovieCast">
        <id property="id" column="id"/>
        <result property="role" column="role"/>

        <association property="person" resultMap="com.rottentomatoes.movieapi.mappers.PersonMapper.personMap"/>

        <collection property="characters" javaType="list" ofType="java.lang.String">
            <result column="character_name"/>
        </collection>
    </resultMap>

    <select id="selectMovieCastCountForMovie" resultMap="movieCastMetaDataResultMap" parameterType="map">
        SELECT
          count(*) as totalCount
        FROM (
        (SELECT id FROM movie_cast
        WHERE movie_id = #{movie_id}
        AND role = 'ACT'
        AND deleted_ind != 1)
        UNION
        (SELECT id FROM movie_cast
        WHERE movie_id = #{movie_id}
        AND role != 'ACT'
        AND deleted_ind != 1
        )) cast_ids
        LEFT JOIN movie_cast ON movie_cast.id = cast_ids.id
        LEFT JOIN movie_person ON movie_cast.person_id = movie_person.id
        LEFT JOIN movie_character ON movie_cast.id = movie_character.cast_id
        WHERE (movie_character.deleted_ind IS NULL OR movie_character.deleted_ind != 1)
        AND (movie_person.deleted_ind IS NULL OR movie_person.deleted_ind != 1)
    </select>

    <resultMap id="movieCastMetaDataResultMap" type="com.rottentomatoes.movieapi.domain.meta.RelatedMetaDataInformation"/>

</mapper>