<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.rottentomatoes.movieapi.mappers.MovieMapper">
    <cache
            flushInterval="600000"
            size="2048"
    />

    <sql id="movieSelectSql">
        #{actorLimit} actorLimit, /* Dummy columns used for passing subselect params */
        #{reviewLimit} reviewLimit,
        #{videoLimit} videoLimit,
        movie.movie_id,
        IF(movie_intl_title.title IS NULL, movie.title, movie_intl_title.title) AS title,
        movie.year,
        IF(movie.theater_release_date IS NULL, intl_theater_release.release_date, movie.theater_release_date) AS theater_release_date,
        movie.dvd_release_date,
        movie.status,
        movie.tomatometer,
        movie.box_office as cummulative_box_office,
        (SELECT moviembo.gross FROM movie_box_office moviembo
                WHERE movie.movie_id=moviembo.movie_id
                AND moviembo.start_date >= #{boxOfficeStartDate} AND moviembo.start_date &lt; ADDDATE(#{startDate}, INTERVAL 1 WEEK)
                ORDER BY theaters DESC, estimate_ind ASC
                LIMIT 1
        ) as box_office,
        movie.sequence,
        movie.feature_level,
        movie.mpaa_rating,
        movie.creation_date,
        movie.last_modified_date,
        movie.version,
        movie.main_trailer,
        movie.advisory,
        movie.studio_id,
        movie.auto_update_ind,
        movie.trailer_update_ind,

        movie_img.id AS movie_img_id,
        movie_img.format AS movie_img_format,
        movie_img.img_width AS movie_img_width,
        movie_img.img_height AS movie_img_height,
        'm' AS movie_img_type,

        'n' AS hero_img_type,
        (SELECT i.id
            FROM multiuse_img_reference r
            JOIN multiuse_img i on i.id=r.multiuse_image_id
            WHERE r.media_type='MV' AND r.media_id=movie.movie_id AND i.subject_type IN ('KYA', 'STL', 'ST2')
                AND r.status='A' AND ((i.img_width/i.img_height > 1.3 AND i.img_width >= 700 AND i.img_height >= 500) OR r.hero_img_ind=1)
            ORDER BY r.hero_img_ind DESC, i.img_width/i.img_height DESC limit 1
        )  AS hero_img_id,
        (SELECT i.format
            FROM multiuse_img_reference r
            JOIN multiuse_img i on i.id=r.multiuse_image_id
            WHERE r.media_type='MV' AND r.media_id=movie.movie_id AND i.subject_type IN ('KYA', 'STL', 'ST2')
                AND r.status='A' AND ((i.img_width/i.img_height > 1.3 AND i.img_width >= 700) OR r.hero_img_ind=1)
            ORDER BY r.hero_img_ind DESC, i.img_width/i.img_height DESC limit 1
        )  AS hero_img_format,
        (SELECT i.img_width
            FROM multiuse_img_reference r
            JOIN multiuse_img i on i.id=r.multiuse_image_id
            WHERE r.media_type='MV' AND r.media_id=movie.movie_id AND i.subject_type IN ('KYA', 'STL', 'ST2')
                AND r.status='A' AND ((i.img_width/i.img_height > 1.3 AND i.img_width >= 700) OR r.hero_img_ind=1)
            ORDER BY r.hero_img_ind DESC, i.img_width/i.img_height DESC limit 1
        )  AS hero_img_width,
        (SELECT i.img_height
            FROM multiuse_img_reference r
            JOIN multiuse_img i on i.id=r.multiuse_image_id
            WHERE r.media_type='MV' AND r.media_id=movie.movie_id AND i.subject_type IN ('KYA', 'STL', 'ST2')
                AND r.status='A' AND ((i.img_width/i.img_height > 1.3 AND i.img_width >= 700) OR r.hero_img_ind=1)
            ORDER BY r.hero_img_ind DESC, i.img_width/i.img_height DESC limit 1
        )  AS hero_img_height,

        movie_studio.name AS studioName,
        IF( tomatometer_info.all_critics &lt; 5, null, tomatometer) AS value, /* Enforce tomatometer=null if NA - this should be taken care of by job */
        CASE
            WHEN certified_fresh THEN 'certified_fresh'
            WHEN tomatometer_info.all_critics &lt; 5 THEN 'NA'
            WHEN tomatometer IS NULL THEN 'NA'
            WHEN (tomatometer >= 60) THEN 'fresh'
            ELSE 'rotten'
        END AS state,
        (SELECT url
            FROM vanity_movie_url
            WHERE movie_id = movie.movie_id
            AND primary_ind = 1
            AND platform = 'RTO'
            ORDER BY url ASC LIMIT 1
        ) AS vanity_token,
        movie_meta_data.running_time,
        movie_meta_data.official_url,
        movie_synopsis.synopsis,
        CASE
            WHEN #{country} = 'us'
                THEN
                    CASE
                        WHEN (movie.theater_release_date BETWEEN DATE_SUB(#{openingDate}, INTERVAL 7 DAY) AND #{openingDate}) THEN 'opening'
                        WHEN (movie.theater_release_date BETWEEN now() AND #{upcomingDate}) THEN 'upcoming'
                        WHEN (movie.theater_release_date BETWEEN #{inTheaterDate} AND now()) THEN 'in-theaters'
                        ELSE 'NA'
                    END
                ELSE
                    CASE
                        WHEN (intl_theater_release.release_date BETWEEN DATE_SUB(#{openingDate}, INTERVAL 7 DAY) AND #{openingDate}) THEN 'opening'
                        WHEN (intl_theater_release.release_date BETWEEN now() AND #{upcomingDate}) THEN 'upcoming'
                        WHEN (intl_theater_release.release_date BETWEEN #{inTheaterDate} AND now()) THEN 'in-theaters'
                        ELSE 'NA'
                    END
        END AS opening_window,
        CASE
            WHEN #{country} = 'us'
                THEN
                    CASE
                        WHEN (movie.dvd_release_date BETWEEN #{newDvdDate} AND #{openingDate}) THEN 'new-on-dvd'
                        WHEN (movie.dvd_release_date BETWEEN now() AND #{upcomingDvdDate}) THEN 'upcoming-dvd'
                        WHEN (movie.dvd_release_date BETWEEN #{onDvdDate} AND now()) THEN 'on-dvd'
                        ELSE 'NA'
                    END
                ELSE
                    CASE
                        WHEN (intl_dvd_release.release_date BETWEEN #{newDvdDate} AND #{openingDate}) THEN 'new-on-dvd'
                        WHEN (intl_dvd_release.release_date BETWEEN now() AND #{upcomingDvdDate}) THEN 'upcoming-dvd'
                        WHEN (intl_dvd_release.release_date BETWEEN #{onDvdDate} AND now()) THEN 'on-dvd'
                        ELSE 'NA'
                    END
        END AS dvd_window,
        IF(intl_theater_release.limited_ind=1,"limited", "wide") as release_scope,
        <include refid="com.rottentomatoes.movieapi.mappers.VideoClipMapper.videoClipColumns" />

        FROM movie
        LEFT JOIN movie_studio ON movie.studio_id=movie_studio.id
        LEFT JOIN movie_meta_data ON movie_meta_data.movie_id = movie.movie_id
        LEFT JOIN tomatometer_info ON tomatometer_info.movie_id = movie.movie_id
        LEFT JOIN movie_synopsis ON movie_synopsis.id = movie_meta_data.synopsis_id
        LEFT JOIN movie_img ON movie_img.id = movie.main_image
        LEFT JOIN video_clip ON movie.main_trailer = video_clip.id
        LEFT JOIN movie_intl_release intl_theater_release ON movie.movie_id=intl_theater_release.movie_id
                AND intl_theater_release.type='THR' AND intl_theater_release.country=#{country}
        LEFT JOIN movie_intl_release intl_dvd_release ON movie.movie_id=intl_dvd_release.movie_id
                AND intl_dvd_release.type='DVD' AND intl_dvd_release.country=#{country}
        LEFT JOIN movie_intl_title ON movie.movie_id = movie_intl_title.movie_id
                AND movie_intl_title.country = #{country}

    </sql>

    <select id="selectMovieById" resultMap="movieResultMap" parameterType="map">
        SELECT
        <include refid="movieSelectSql"/>
        WHERE movie.movie_id = #{id}
        AND movie.status = 1 /* active movies only */
    </select>

    <resultMap id="movieResultMap" type="com.rottentomatoes.movieapi.domain.model.Movie">
        <id property="id" column="movie_id"/>
        <result property="title" column="title"/>
        <result property="year" column="year"/>
        <result property="boxOffice" column="box_office"/>
        <result property="cummulativeBoxOffice" column="cummulative_box_office"/>
        <result property="mpaaRating" column="mpaa_rating" javaType="com.rottentomatoes.movieapi.enums.MpaaRating"
                typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/>
        <result property="creationDate" column="creation_date" javaType="java.time.ZonedDateTime"/>
        <result property="lastModifiedDate" column="last_modified_date" javaType="java.time.ZonedDateTime"/>
        <result property="advisory" column="advisory"/>
        <result property="vanity" column="vanity_token"/>
        <result property="synopsis" column="synopsis"/>
        <result property="runningTime" column="running_time"/>
        <result property="officialUrl" column="official_url"/>
        <result property="openingWindow" column="opening_window" />
        <result property="dvdWindow" column="dvd_window" />
        <result property="releaseScope" column="release_scope" />

        <result property="studioName" column="studioName"/>
        <association property="releaseDates" javaType="map">
            <result property="theater" column="theater_release_date" javaType="java.time.LocalDate"/>
            <result property="dvd" column="dvd_release_date" javaType="java.time.LocalDate"/>
        </association>
        <association property="tomatometer" javaType="map">
            <result property="value" column="value"/>
            <result property="state" column="state"/>
        </association>

        <association property="mainTrailer" resultMap="com.rottentomatoes.movieapi.mappers.VideoClipMapper.videoClipResultMap" />

        <association property="posterImage" resultMap="com.rottentomatoes.movieapi.mappers.ImageMapper.imageResultMap" columnPrefix="movie_" notNullColumn="img_id"/>

        <association property="heroImage" resultMap="com.rottentomatoes.movieapi.mappers.ImageMapper.imageResultMap" columnPrefix="hero_" notNullColumn="img_id"/>

    </resultMap>

</mapper>
