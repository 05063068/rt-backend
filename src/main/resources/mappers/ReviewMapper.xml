<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
  Notes: Reviews sorted by top status first and then by descending creation date
         A 'top review's is one made by a top critic (one appearing in the critic_top table)
 -->

<mapper namespace="com.rottentomatoes.movieapi.mappers.ReviewMapper">
	<sql id="reviewSelectColumns">
       	review.id,       
		review.movie_id, 
		review.critic_id,
		review.publication_id,
		review.status,   
		review.category, 
		CASE WHEN review.score='F' THEN 'fresh' WHEN review.score='R' THEN 'rotten' ELSE 'NA'  END AS score,    
		review.score_ori,
		review.score_ori_normal,
		review.quote,    
		review.url,      
		review.review,   
		review.language, 
		review.creator_user_id,
		review.modifier_user_id,
		review.creation_date,
		review.last_update_date,
		review.top_ind,  

        <include refid="com.rottentomatoes.movieapi.mappers.CriticMapper.criticSelectColumns" />,

        <include refid="com.rottentomatoes.movieapi.mappers.PublicationMapper.publicationSelectColumns" />,

        IF(critic_top.critic_id OR publication_top.publication_id,1,0) AS is_top_critic

	</sql>

    <select id="selectReviewById" resultMap="reviewResultMap">
        SELECT <include refid="reviewSelectColumns" />
        FROM review
        <include refid="commonSubselectJoins" />
        WHERE review.id = #{id}
        AND review.status = 'A'
    </select>

    <sql id="commonSubselectJoins">
        LEFT JOIN critic ON review.critic_id=critic.id
        LEFT JOIN critic_img ON critic_img.id = critic.image_id
        LEFT JOIN critic_top ON (review.critic_id=critic_top.critic_id AND critic_top.country=#{country})
        LEFT JOIN publication ON review.publication_id=publication.id
        LEFT JOIN publication_top ON (review.publication_id=publication_top.publication_id AND publication_top.country=#{country})
    </sql>

    <!-- Note: Logic below dictates what shows up on the MOB and is carefully crafted to meet strict Product requirements.
               Please do not change lightly.

        Highlighted Reviews:
        - top 6 (max) reviews are from top critics (sortkey=1), order by descending creation date
        - next 6 (max) are from non-top critics (sortkey=0), order by descending creation date
        - Note that there could be less than 12 highlighted reviews
        - Rest are mixed (order by sortkey, creation_date), no dupes from first are allowed

        To appear in list at all:
        - Either critic or publication must be tomatometer approved
        - Only theatrical reviews. No DVD.
        - Empty review text not allowed in highlighted section but might be present in backfill
    -->
    <select id="selectAllReviewsForMovie" resultMap="reviewResultMap" parameterType="map">
        SELECT <include refid="reviewSelectColumns" />
        FROM review
        <include refid="commonSubselectJoins" />
        LEFT JOIN (
            (
                SELECT review.id, 1 AS sort_key FROM review
                <include refid="commonSubselectJoins" />
                WHERE review.movie_id = #{movie_id}
                AND review.status = 'A' AND (critic.approved_ind=1 OR publication.approved_ind=1)
                AND NOT review.category='DVD'
                AND review.quote IS NOT NULL
                AND (critic_top.critic_id IS NOT NULL OR publication_top.publication_id IS NOT NULL)
                ORDER BY review.creation_date DESC
                LIMIT 6
            )
            UNION
            (
                SELECT review.id, 0 AS sort_key FROM review
                <include refid="commonSubselectJoins" />
                WHERE review.movie_id = #{movie_id}
                AND review.status = 'A' AND (critic.approved_ind=1 OR publication.approved_ind=1)
                AND NOT review.category='DVD'
                AND review.quote IS NOT NULL
                AND NOT (critic_top.critic_id IS NOT NULL OR publication_top.publication_id IS NOT NULL)
                ORDER BY review.creation_date DESC
                LIMIT 6
            )
        ) featured ON review.id=featured.id

        WHERE review.movie_id = #{movie_id}
        AND review.status = 'A' AND (critic.approved_ind=1 OR publication.approved_ind=1)
        AND NOT review.category='DVD'
        ORDER BY featured.sort_key DESC, review.creation_date DESC
        <choose>
            <when test="limit != null and offset != null">
                LIMIT #{offset},#{limit}
            </when>
            <when test="limit != null">
                LIMIT #{limit}
            </when>
        </choose>
    </select>

    <select id="selectTopCriticReviewsForMovie" resultMap="reviewResultMap" parameterType="map">
        SELECT <include refid="reviewSelectColumns" />
        FROM review
        <include refid="commonSubselectJoins" />
        WHERE review.movie_id = #{movie_id}
        AND review.status = 'A'
        AND NOT review.category='DVD'
        HAVING is_top_critic = 1
        ORDER BY review.creation_date DESC

        <choose>
            <when test="limit != null and offset != null">
                LIMIT #{offset},#{limit}
            </when>
            <when test="limit != null">
                LIMIT #{limit}
            </when>
        </choose>
    </select>

    <select id="selectReviewsByCritic" resultMap="reviewResultMap" parameterType="map">
        SELECT
        <include refid="reviewSelectColumns" />
        FROM review
        <include refid="commonSubselectJoins" />
        WHERE (critic.id = #{critic_id} OR critic.vanity_url = #{critic_id})
        AND review.status = 'A'
        <choose>
            <when test="category == 'movie'">
                AND review.category='MOV'
            </when>
            <when test="category == 'dvd'">
                AND review.category='DVD'
            </when>
            <when test="category == 'quick'">
                AND review.category='QCK'
            </when>
            <when test="category == 'fresh'">
                AND review.score='F'
            </when>
            <when test="category == 'rotten'">
                AND review.score='R'
            </when>
            <otherwise>
                AND NOT review.category='DVD'
            </otherwise>
        </choose>

        <choose>
            <when test="order == 'best'">
                ORDER BY review.score_ori_normal DESC
            </when>
            <when test="order == 'worst'">
                ORDER BY review.score_ori_normal ASC
            </when>
            <otherwise>
                ORDER BY review.creation_date DESC
            </otherwise>
        </choose>

        <choose>
            <when test="limit != null and offset != null">
                LIMIT #{offset},#{limit}
            </when>
            <when test="limit != null">
                LIMIT #{limit}
            </when>
        </choose>
    </select>

    <select id="selectReviewsByPublication" resultMap="reviewResultMap" parameterType="map">
        SELECT
        <include refid="reviewSelectColumns" />
        FROM review
        <include refid="commonSubselectJoins" />
        WHERE review.publication_id = #{publication_id}
        AND review.status = 'A'
        AND NOT review.category='DVD'
        ORDER BY review.creation_date DESC

        <choose>
            <when test="limit != null and offset != null">
                LIMIT #{offset},#{limit}
            </when>
            <when test="limit != null">
                LIMIT #{limit}
            </when>
        </choose>
    </select>


    <select id="selectAllReviews" resultMap="reviewResultMap" parameterType="map">
        SELECT <include refid="reviewSelectColumns" />
        FROM review
        <include refid="commonSubselectJoins" />
        WHERE review.status = 'A'

        <choose>
            <when test="category == 'theatrical'">
                AND review.category='MOV'
            </when>
            <when test="category == 'dvd'">
                AND review.category='DVD'
            </when>
            <when test="category == 'quick'">
                AND review.category='QCK'
            </when>
        </choose>

        ORDER BY review.creation_date DESC

        <choose>
            <when test="limit != null and offset != null">
                LIMIT #{offset},#{limit}
            </when>
            <when test="limit != null">
                LIMIT #{limit}
            </when>
        </choose>
    </select>



    <resultMap id="reviewResultMap" type="com.rottentomatoes.movieapi.domain.model.Review">
        <id property="id" column="id" />
        <result property="movieId" column="movie_id"/>
        <result property="quote" column="quote"/>
        <result property="scoreOri" column="score_ori"/>
        <result property="score" column="score"/>
        <result property="url" column="url"/>
        <result property="creationDate" column="creation_date" javaType="java.time.ZonedDateTime"/>
        <result property="topCritic" column="is_top_critic"/>
        <result property="category" column="category" />

        <!-- Return critic automatically with review for efficiency -->
        <association property="critic" resultMap="com.rottentomatoes.movieapi.mappers.CriticMapper.criticResultMap"/>

        <!-- Return publication automatically with review for efficiency -->
        <association property="publication" resultMap="com.rottentomatoes.movieapi.mappers.PublicationMapper.publicationResultMap" />
    </resultMap>

    <!-- TODO: Count should be consistent with tomatometer_info.freshCount + tomatometer_info.rottenCount
               However codepath is completely different so divergence is expected.
    -->
    <select id="selectAllReviewCountForMovie" resultMap="reviewMetaDataResultMap" parameterType="map">
        SELECT
          count(*) as totalCount
        FROM review
        <include refid="commonSubselectJoins" />
        WHERE review.movie_id = #{movie_id}
        AND review.status = 'A' AND (critic.approved_ind=1 OR publication.approved_ind=1)
        AND NOT review.category='DVD'
    </select>

    <select id="selectTopCriticReviewCountForMovie" resultMap="reviewMetaDataResultMap" parameterType="map">
        SELECT
          count(*) as totalCount
        FROM review
        LEFT JOIN critic ON review.critic_id=critic.id
        LEFT JOIN publication ON review.publication_id=publication.id
        INNER JOIN critic_top ON (review.critic_id=critic_top.critic_id AND critic_top.country='US')
        WHERE review.movie_id = #{movie_id}
        AND (publication.country=#{country} OR critic_top.country=#{country})
        AND review.status = 'A'
    </select>

    <select id="selectAllReviewCountForCritic" resultMap="reviewMetaDataResultMap" parameterType="map">
        SELECT
        COUNT(*) as totalCount
        FROM review
        <include refid="commonSubselectJoins" />
        WHERE (critic.id = #{critic_id} OR critic.vanity_url = #{critic_id})
        AND review.status = 'A'
        AND NOT review.category='DVD'
    </select>


    <select id="selectAllReviewCountForPublication" resultMap="reviewMetaDataResultMap" parameterType="map">
        SELECT
          COUNT(*) as totalCount
        FROM review
        <include refid="commonSubselectJoins" />
        WHERE review.publication_id = #{publication_id}
        AND review.status = 'A'
        AND NOT review.category='DVD'
    </select>

    <select id="selectCriticAgreementPercentage" resultType="java.lang.Integer" parameterType="map">
            SELECT
            COALESCE(
                SUM( IF( (movie.tomatometer IS NULL
                OR (review.score = 'F' AND movie.tomatometer &gt;= 60)
                OR (review.score = 'R' AND movie.tomatometer &lt; 60)),
                1, 0)
                ) /
                COUNT(*) * 100, -1) AS percentage
            FROM review
            LEFT JOIN movie ON review.movie_id = movie.movie_id
            <include refid="commonSubselectJoins" />
            WHERE (critic.id = #{critic_id} OR critic.vanity_url = #{critic_id})
            AND review.status = 'A'
            AND NOT review.category = 'DVD'
    </select>

    <resultMap id="reviewMetaDataResultMap" type="com.rottentomatoes.movieapi.domain.meta.RelatedMetaDataInformation" />

</mapper>

