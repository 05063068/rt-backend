<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
  Notes: Reviews sorted by top status first and then by descending creation date
         A 'top review's is one made by a top critic (one appearing in the critic_top table)
 -->
 
<mapper namespace="com.rottentomatoes.movieapi.mappers.ReviewMapper">
	<sql id="reviewSelectColumns">
       	review.id,       
		review.movie_id, 
		review.critic_id,
		review.publication_id,
		review.status,   
		review.category, 
		CASE WHEN review.score='F' THEN 'fresh' WHEN review.score='R' THEN 'rotten' ELSE 'NA'  END AS score,    
		review.score_ori,
		review.score_ori_normal,
		review.quote,    
		review.url,      
		review.review,   
		review.language, 
		review.creator_user_id,
		review.modifier_user_id,
		review.creation_date,
		review.last_update_date,
		review.top_ind,  

        <include refid="com.rottentomatoes.movieapi.mappers.CriticMapper.criticSelectColumns" />,
        publication.name AS publication_name
	</sql>

    <select id="selectReviewById" resultMap="reviewResultMap">
        SELECT <include refid="reviewSelectColumns" />
        FROM review
        <include refid="commonSubselectJoins" />
        WHERE review.id = #{id}
        AND review.status = 'A' AND (critic.approved_ind=1 OR publication.approved_ind=1)
    </select>

    <sql id="commonSubselectJoins">
        LEFT JOIN critic_img ON critic_img.id = critic.image_id
        LEFT JOIN critic ON review.critic_id=critic.id
        LEFT JOIN publication ON review.publication_id=publication.id
        LEFT JOIN critic_top ON (review.critic_id=critic_top.critic_id AND critic_top.country=#{country})
        LEFT JOIN publication_top ON (review.publication_id=publication_top.publication_id AND publication_top.country=#{country})
    </sql>

    <!-- Note
        - top 6 reviews are from top critics (sortkey=1), order by descending creation date
        - next 6 are from non-top critics (sortkey=0), order by descending creation date
        - rest are mixed (sortkey=null), no dupes from first 12 are allowed, order by descending creation date
    -->
    <select id="selectAllReviewsForMovie" resultMap="reviewResultMap" parameterType="map">
        SELECT <include refid="reviewSelectColumns" />
        FROM review
        <include refid="commonSubselectJoins" />
        LEFT JOIN critic_img ON critic_img.id = critic.image_id
        LEFT JOIN (
            (
                SELECT review.id, 1 AS sort_key FROM review
                <include refid="commonSubselectJoins" />
                WHERE review.movie_id = #{movie_id}
                AND review.status = 'A' AND (critic.approved_ind=1 OR publication.approved_ind=1)
                AND (critic_top.critic_id IS NOT NULL OR publication_top.publication_id IS NOT NULL)
                ORDER BY review.creation_date DESC
                LIMIT 6
            )
            UNION
            (
                SELECT review.id, 0 AS sort_key FROM review
                <include refid="commonSubselectJoins" />
                WHERE review.movie_id = #{movie_id}
                AND review.status = 'A' AND (critic.approved_ind=1 OR publication.approved_ind=1)
                AND NOT (critic_top.critic_id IS NOT NULL OR publication_top.publication_id IS NOT NULL)
                ORDER BY review.creation_date DESC
                LIMIT 6
            )
        ) featured ON review.id=featured.id

        WHERE review.movie_id = #{movie_id}
        AND review.status = 'A' AND (critic.approved_ind=1 OR publication.approved_ind=1)
        ORDER BY featured.sort_key DESC, review.creation_date DESC
        <choose>
            <when test="limit != null and offset != null">
                LIMIT #{offset},#{limit}
            </when>
            <when test="limit != null">
                LIMIT #{limit}
            </when>
        </choose>
    </select>

    <select id="selectTopCriticReviewsForMovie" resultMap="reviewResultMap" parameterType="map">
        SELECT <include refid="reviewSelectColumns" />
        FROM review
        LEFT JOIN critic ON review.critic_id=critic.id
        LEFT JOIN publication ON review.publication_id=publication.id
        LEFT JOIN critic_img ON critic_img.id = critic.image_id
        LEFT JOIN critic_top ON (review.critic_id=critic_top.critic_id AND critic_top.country=#{country})
        LEFT JOIN publication_top ON (review.publication_id=publication_top.publication_id AND publication_top.country=#{country})
        WHERE review.movie_id = #{movie_id}
        AND review.status = 'A' AND (critic.approved_ind=1 OR publication.approved_ind=1)
        HAVING is_top_critic = 1
        ORDER BY review.creation_date DESC

        <choose>
            <when test="limit != null and offset != null">
                LIMIT #{offset},#{limit}
            </when>
            <when test="limit != null">
                LIMIT #{limit}
            </when>
        </choose>
    </select>
    
    <resultMap id="reviewResultMap" type="com.rottentomatoes.movieapi.domain.model.Review">
        <id property="id" column="id" />
        <result property="movieId" column="movie_id"/>
        <result property="quote" column="quote"/>
        <result property="scoreOri" column="score_ori"/>
        <result property="score" column="score"/>
        <result property="url" column="url"/>
        <result property="creationDate" column="creation_date" javaType="java.time.ZonedDateTime"/>
        <result property="topCritic" column="is_top_critic"/>

        <!-- Return critic automatically with review -->
        <association property="critic" resultMap="com.rottentomatoes.movieapi.mappers.CriticMapper.criticResultMap" columnPrefix="critic_"/>

        <!-- Return publication automatically with review -->
        <association property="publication" javaType="com.rottentomatoes.movieapi.domain.model.Publication">
            <id property="id" column="publication_id"/>
            <result property="name" column="publication_name"/>
        </association>
    </resultMap>
    

    <!--  TODO: Move into own CriticMapper.xml -->
    <resultMap id="criticResultMap" type="com.rottentomatoes.movieapi.domain.model.Critic">   
        <id property="id" column="critic_id"/>
        <result property="name" column="critic_name"/>
        <result property="vanity" column="critic_vanity_url"/>
        <association property="mainImage" resultMap="com.rottentomatoes.movieapi.mappers.ImageMapper.imageResultMap" columnPrefix="critic_" notNullColumn="img_id"/>
    </resultMap>    

    <select id="selectAllReviewCountForMovie" resultMap="reviewMetaDataResultMap" parameterType="map">
        SELECT
          count(*) as totalCount
        FROM review
        LEFT JOIN critic ON review.critic_id=critic.id
        LEFT JOIN publication ON review.publication_id=publication.id
        LEFT JOIN critic_top ON (review.critic_id=critic_top.critic_id AND critic_top.country='US')
        WHERE review.movie_id = #{movie_id}
        AND (publication.country=#{country} OR critic_top.country=#{country})
        AND review.status = 'A'
    </select>

    <select id="selectTopCriticReviewCountForMovie" resultMap="reviewMetaDataResultMap" parameterType="map">
        SELECT
          count(*) as totalCount
        FROM review
        LEFT JOIN critic ON review.critic_id=critic.id
        LEFT JOIN publication ON review.publication_id=publication.id
        INNER JOIN critic_top ON (review.critic_id=critic_top.critic_id AND critic_top.country='US')
        WHERE review.movie_id = #{movie_id}
        AND (publication.country=#{country} OR critic_top.country=#{country})
        AND review.status = 'A'
    </select>

    <resultMap id="reviewMetaDataResultMap" type="com.rottentomatoes.movieapi.domain.meta.RelatedMetaDataInformation" />

</mapper>

