files:
    # We need a custom repo for logstash since it is not default in yum.
    "/etc/yum.repos.d/logstash.repo":
        mode: "000644"
        owner: root
        group: root
        content: |
            [logstash-1.5]
            name=Logstash repository for 1.5.x packages
            baseurl=http://packages.elasticsearch.org/logstash/1.5/centos
            gpgcheck=1
            gpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch
            enabled=1

    # logstash config
    "/tmp/logstash.conf":
        mode: "000644"
        owner: root
        group: root
        content: |
            input {
                file {
                    path => "/var/log/httpd/access_log_duration"
                    type => "web"
                    add_field => {
                        sub_type    => "http_access"
                        vip         => "catalog-api"
                        env         => "__EB_ENV__"
                    }
                }
            }
            input {
                file {
                    path => "/var/log/tomcat8/application-json*"
                    type => "tomcat"
                    add_field => {
                        vip     =>  "catalog-api"
                        env     =>  "__EB_ENV__"
                    }
                }
            }
            filter {

                if [type] in ["tomcat", "web"] {
                    json {
                        source => "message"
                    }
                }
                if [type] in "web" {
                // { "@timestamp": "2016-03-17T09:33:46+00:00", "remote_addr": "172.31.28.180", "remote_user": "-", "body_bytes_sent": "0", "request_time": "0.002", "status": "204", "request": "GET /manager/html HTTP/1.1", "request_method": "GET", "http_referrer": "-", "http_user_agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)" }
                    grok {
                        match => { "message" => "%{IPORHOST:clientIp} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:method} %{URIPATH:urlPath}(?:%{URIPARAM:urlQuery})?(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:status} (?:%{NUMBER:bytes}|-) %{QS:referer} %{QS:userAgent} %{NUMBER:duration}" }
                    }
                    mutate {
                        add_field => { "urlPathNormalized" => "%{urlPath}" }
                    }
                    mutate {
                        convert => [ "duration" , "integer" ]
                        convert => [ "bytes" , "integer" ]
                        remove_field => [ "message", "offset", "ident", "auth", "timestamp" ]

                        gsub => [
                            "urlPathNormalized", "^([^?]+)(?<!/)/?\?*.*$", "\1"
                            ]
                        gsub => [ "urlPathNormalized", "(/mobile)*/(actor|movie|m|tv|user|critic|quiz|news|play|movie-times|watch-movies|watch-tv|celebrity)/[\w_-]+(/?)(.*)$", "\1/\2/{ID}\3\4" ]

                        # normalization for ticketing hex identifiers
                        gsub => [ "urlPathNormalized", "retailTxn\/[a-fA-F0-9]*[0-9]+[a-fA-F0-9]*", "retailTxn/{ID}" ]
                        gsub => [ "urlPathNormalized", "tickets\/[a-fA-F0-9]*[0-9]+[a-fA-F0-9]*", "tickets/{ID}" ]

                        # /api/private/v1.0/user/771357113 => /api/private/v1.0/user/{ID}
                        # /android/api/v1/movies/771373844.json => /android/api/v1/movies/{ID}.json
                        # /user/926527976/collection => /user/XXX/collection
                        # /a/v1.1/42342/b/422242/c/42234.json = > /a/v1.1/XXX/b/XXX/c/XXX.json
                        gsub => [ "urlPathNormalized", "(?<!v|\.)[0-9]+", "{ID}" ]
                    }
                    # convert latency from micro-seconds to milli-seconds
                    ruby {
                        code => "event['duration'] = event['duration']/1000"
                    }
                }
            }
            output {
                redis {
                    key       => "logging"
                    data_type => "list"
                    host      => "logs-redis.aws.prod.flixster.com"
                }
            }

commands:
    000-add-sudoers:
        command: "grep -q 'Defaults:root !requiretty' /etc/sudoers.d/logstash || echo -e 'Defaults:root !requiretty' > /etc/sudoers.d/logstash; chmod 440 /etc/sudoers.d/logstash"
    100-install-logstash:
        command: "yum -y install logstash"

container_commands:
    100-replace-env:
    # Inject the environment name to the logstash config. This creates the
    # config that is actually used
        command: "sudo sed \"s/__EB_ENV__/$(/usr/local/bin/get-eb-env-name)/g\" /tmp/logstash.conf > /etc/logstash/conf.d/logstash.conf"
    200-start-logstash:
        command: "sudo service logstash start"
